name: Continuous integration

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

permissions:
  contents: write
  id-token: write

env:
  PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  build:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - run: docker system prune --all --force
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=ci/requirements.txt

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files --color=always
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()

      - uses: actions/upload-artifact@v5
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()
      - name: Print environment information
        run: c2cciutils-env

      - name: GitHub event
        run: echo ${GITHUB_EVENT} | python3 -m json.tool
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - run: pip install .

      - run: (cd example/; poetry build -v)
      - run: unzip example/dist/example-*-py3-none-any.whl
      - run: cat example-*.dist-info/METADATA
      - run: "grep '^Requires-Python: >=3.9$' example-*.dist-info/METADATA"

      - run: rm -rf example/dist/example-*-py3-none-any.whl example-*.dist-info example/__init__.py

      - run: poetry install
      - run: poetry run prospector --output=pylint

      - name: Init pypi
        run: |-
          echo "[pypi]" > ~/.pypirc
          echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
        if: startsWith(github.ref, 'refs/tags/')

      - name: Publish PyPI
        run: tag-publish
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')
      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v5
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
